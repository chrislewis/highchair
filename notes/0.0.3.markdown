Highchair Remote
----------------
As of Google App Engine SDK version 1.4.3, it is possible to interface
with App Engine services from any application through the
[Remote API][gae_remote]. With highchair remote you can bind to a remote
applicaiton by providing the application id and the credentials of an
admin user for that application.

    val remote = Remote("localhost" -> 8080, "user@foo.com" -> "foopass")

With a ``Remote`` instance, you can interact with various App Engine services
through blocks scoped to a remote application.

    remote {
      val ds = DatastoreServiceFactory.getDatastoreService
      ds.put(new Entity("RemoteEntity"))
    }

``Remote`` blocks are scoped such that when then block terminates, subsequent
service calls will resume local bindings.

See the [wiki page][remote_wiki] page for more information.

[gae_remote]: http://code.google.com/appengine/docs/java/tools/remoteapi.html
[remote_wiki]: https://github.com/chrislewis/highchair/wiki/Remote


Highchair Util and Spec
--------------
The util module provides a single useful tool, `DevServer`, which provides
basic control over a local GAE dev server. If you have defined the
`APPENGINE_SDK_HOME` environment variable, the following is enough to obtain
a `DevServer` instance:

    val server = DevServer()

With a `DevServer`, you can quickly start and deploy an app:

    server.start(pathToWar)
    
The spec module contains a new base spec for integration tests against a
local app:

    class MyGAESpec extends highchair.specs.AppSpec { /* specs here */ }

Breaking Changes
----------------
* ``Kind#newKey`` has been removed as it relied on a hack that fails locally in current versions of the sdk 
